#-*- mode: org-*-
#+STARTUP: showall
#+TAGS: WORK(w) HOME(h) READING(r) COMPUTER(c) FINANCE(f)


* MY TODOS
** DONE submit mathrock form <2019-04-30 Tue>
** DONE citadel background test <2019-04-30 Tue>
** DONE drug screen test <2019-04-30 Tue>
** DONE voting <2019-05-04 Fri>
** DONE resignation letter <deadline: 2019-05-03 ping>
How to approach HBK resignation? What is my current strategy? The date
they want to start 6/10. I hope HBK can have me until 6/3? That will
be very good.

There are so many things going on at once. I will need to think about
it. Need to be calm. Take it easy. Take it slow.
I like emacs more and more. There is a thing or two in emacs
that I need to learn. Learn to be more efficient. Learn to work hard.
Learn to be calm.

Waiting for Ross's reply by tomorrow.
Stay at HBK till end of May. Start at citadel in June.
No defer, no prorated bonus.
** DONE repair frige <2019-05-01 Wed>
   ordered a starter on amazon prime, arrive on Friday not working,
   ordered a new fridge <2019-05-03 Fri 9:00AM delivery>
** DONE dental visit <2019-05-09 Thu>
** DONE phone call with altair relocation <2019-05-09 Thu 8:00AM>
** DONE study FPGA HLS book					    :READING:
*** SOC book
[https://www.zynq-mpsoc-book.com/wp-content/uploads/2019/04/MPSoC_ebook_web_v1.0.pdf][book]]
up to ch.12
  barebone, FreeRTOS, linux
  AMP (OpenAMP), SMP
  SupervisedAMP (Hypervisor)
  Use SDX to generete wrapper C function to the IP core
    - xml file, data-move betweeen host and card
  software config (xml)
  hardware config (xml)
    specify signal, port connections
  platform config (xml)
  use template.xml as guide
  > sdspfm -gui  // utility to gen template file
PYNQ: jupyter, python, API to hardware IP

** TODO prime expire <2019-05-31 Fri>

** TODO OPENCL source code
    SDAccel_Examples: https://github.com/Xilinx/SDAccel_Examples

** TODO sell plano house
   change carpet
   replace fire alarm

** TODO move to chicago
    pool chemical: https://www.poolman.com/pool-services/pool-maintenance/
    https://www.aquacleanpoolservice.com/Pool-Service.html
    lawn mower: use charles guy???

** TODO chicago housing                                                :HOME:
   money: 160K+120K+50K=330K+400K=730K
   ** Naperville train(1h) to work
      203, 204(newer)
   ** Wilmette, New Trier (expensive)
   ** oak brook
   ** Hinsdale
   ** Vernon hills N(38m) 310K
   ** Stevenson (lincolnshire)
   ** Tower Lake, NW (40m) 500k
   ** South Barrington, NW  (35m) 800k
   ** Green Oaks, N(40m) 550K
   ** Buffalo Brove, NW(35m) 300k
   ** Naperville W(35m) 370k
   ** Northbrook N(25m) 520K
   ** Winnetka N(20m) 940K
   ** Willowbrook W(20m) 210K
   ** Deerfield N(30m) 500K

** Archive							    :ARCHIVE:
*** TODO dummy
    :PROPERTIES:
    :ARCHIVE_TIME: 2019-05-01 Wed 09:41
    :END:



* MY DIARIES

2019/5/1
---------

* emacs org-mode                                                   :COMPUTER:

** set org-mode
   M-x org-mode
   "#-*- mode: org-*-"
** config todo
   "#+TODO: TODO IN-PROGRESS WAITING DONE"
   (setq org-todo-keywords
       '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
** define shortcut key for org-agenda
   (global-set-key (kbd "C-c a") 'org-agenda)
** add timestamps when closing TODO item
   (setq org-log-done 'time)
** evaluate buffer region of elisp
   M-x eval-region
** archive
   (setq org-archive-location (concat "archive/archive-"
                                   (format-time-string "%Y%m" (current-time))
                                   ".org_archive::"))
   default location: <<file>>_archive.
   In buffer option setting  "#+ARCHIVE: %s_done::"
** tag
   "#+TAGS: { @OFFICE(o) @HOME(h) } COMPUTER(c) PHONE(p) READING(r)"
   (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop"
   . ?l)))
   Every headline can contain a list of tags. Tags must be preceded
   and followed by a signle colon `:work:urgent:'
   SubItem inherits tags from ParentItem.
   M-x org-mode m create a global list of tags matches from agenda files
   M-x org-mode M only TODO under tag matches

** export
   C-c C-e - export menu

* A high frequency market making algorithm			    :FINANCE:
- limit order book
- two sided markets for a specified list of equities
- managing inventory, reducing risk of adverse selection by changing the rate
  of inventory accumulation dynamicallly
- dynamically adjusts the range of the bid-ask spread, with the aim of
  minimizing inventory level on market close
- make use of estimates of recent market trends and adjust the bid-offer spead
  to lean in the direciton of the tread
- a manual adjust factor allows the market-maker to nuge the algorithm in the
  direction of reducing inventory.

Use queuing theory to model the order arrival
Use indifference price (parametered on the size of the book)

Here is the 2008 paper on using limit order as market maker
[[https://www.math.nyu.edu/faculty/avellane/HighFrequencyTrading.pdf][paper]]. Modelling with the limit price for profit.

2019/05/07
---------
Altair relocation
https://client.altairglobal.com/Account/Login?ReturnUrl=%2F
usr: yihaoran
pwd: Yi@123456789

TODO
    * $7,500 --  check 5/15
    * 60 days temp housing
    * extention of sale of house


apartment in chicago
* https://www.zumper.com/apartments-for-rent/36126784/studio-lakeview-chicago-il
* studio lakeview $1,165



2019/05/13                                                         :COMPUTER:
---------
A commandline tool that takes a json file and generate C++ classes to work
with that data.  Internall it use JsonLink libary.

https://github.com/beached/json_to_cpp
https://github.com/beached/daw_json_link

paxos disbributed consensus algorithm
proposer and acceptor
    single acceptor: accept the earilest proposer's value
        limitation: if acceptor is done, no progress, single point failure
    multiple acceptor: accept the value with majority
        cons: not efficient when scaling

mull testing
    mutant, against existing unitest, calculate score
    if there are test failure for mutant --> good coverage


2019/05/14                                                         :COMPUTER:
---------
wavedrom: https://wavedrom.com/tutorial.html
json for wavedata, java script to view the wave data
<script src="http://wavedrom.com/skins/default.js" type="text/javascript"></script>
<script src="http://wavedrom.com/wavedrom.min.js" type="text/javascript"></script>
<body onload="WaveDrom.ProcessAll()">
<script type="WaveDrom">
{ signal: [
    { name: "clk", wave: "p......"},
    { name: "bus", wave: "x.34.5x"}, data: "head body tail" },
    { name: "wire", wave: "0.1..0." },
]}
</script>


2019/05/15                                                         :COMPUTER:
---------
emacs package management
;; add melpa package repo
(require 'package)
(add-to-list 'package-archives
             '("MELPA STABLE" . "https://stable.melpa.org/packages/") t)
(package-initialize)
M-x list-packages
M-x package-install RET flycheck

;; use-package install and config package
(use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

use ~/.emacs.d/init.el instead of ~/.emacs to config your emacs
1. no clutter $HOME dir
2. commit init.el to github: git clone repo ~/.emacs.d


2019/05/15                                                         :COMPUTER:
---------
Jenkins Pipeline (./Jenkinsfile)
- define build stage inside Jenkinsfile
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building ...'
            }
        }
        stage('Testing') {
            steps {
                echo 'Testing ...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying ...'
            }
        }
    }
    post {
        alwasy { ... }
        success { ... }
        failure { ... }
        unstable { ... }
        changed { ... }
    }
}
https://jenkins.io/doc/pipeline
https://github.com/jenkinsci/pipeline-examples/tree/master/pipeline-examples

2019/05/16                                                         :COMPUTER:
---------
Makefile/shell tips
- use 'filter', 'strip', 'subst', 'suffix' to manipulate string (i.e. filename,
  flag) in make file.
- use 'rc=$?; if [[ $? == 0 ]] ' to check success/failure of the last command
- use 'cmd 2>/dev/null 1>&2' to omit printing error output

2019/05/16                                                         :COMPUTER:
---------
ctag: add .cl to langmap
    ctag --langmap=c:+.cl -R .
vim add tag file
    :set tags=./tags;


2019/05/20                                                         :TRAVEL:
---------
Flight AA84 DFW-LAX 10:25PM 2019/5/20 delayed
Missed 1:30AM 5/21 5:30AM (+1)
Given hotel, meal and taxi voucher
Change to CA988 AirChina 2:20PM 2019/5/21 -- 6:10PM +1
MF3502 9:25-11:05 Qingdao (actual 10:40) -- Huimin (5h) 4:00AM 2019/5/23

2019/05/21                                                        :RELOCATION:
---------
Ebby haliday realtors (large corop **)
RE/Max Premier (RE/MAX) prefer
Virgina cook realtors  (closing down)

Thank you!
I prefer Ebby haliday realtors. I am available to meet with the agenet until
6/5. Thanks!


2019/05/22                                                        :Trading:
---------
Trading Software Used at HBK
OAsys
    - process end of day allocation with broker
    - centralized point (no more email/phone manual matching)
Geneva
    - object relation database, gather transactions report positions
    - unix server
    - loader to enter data
    - reporter to generate report

============================================================================
TODO
lawn
    https://budgetlawncare.net/
    https://www.trugreen.com/local-lawn-care/texas/plano?utm_source=google&utm_medium=local&utm_campaign=google-local7500200121
    https://thompson-landscape.com/lawn-care-services/lawn-mowing-services/
pool
    https://www.poolman.com/
    972-221-1213
