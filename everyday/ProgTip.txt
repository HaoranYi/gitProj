2019/05/13                                                         :COMPUTER:
---------
A commandline tool that takes a json file and generate C++ classes to work
with that data.  Internall it use JsonLink libary.

https://github.com/beached/json_to_cpp
https://github.com/beached/daw_json_link

paxos disbributed consensus algorithm
proposer and acceptor
    single acceptor: accept the earilest proposer's value
        limitation: if acceptor is done, no progress, single point failure
    multiple acceptor: accept the value with majority
        cons: not efficient when scaling

mull testing
    mutant, against existing unitest, calculate score
    if there are test failure for mutant --> good coverage


2019/05/14                                                         :COMPUTER:
---------
wavedrom: https://wavedrom.com/tutorial.html
json for wavedata, java script to view the wave data
<script src="http://wavedrom.com/skins/default.js" type="text/javascript"></script>
<script src="http://wavedrom.com/wavedrom.min.js" type="text/javascript"></script>
<body onload="WaveDrom.ProcessAll()">
<script type="WaveDrom">
{ signal: [
    { name: "clk", wave: "p......"},
    { name: "bus", wave: "x.34.5x"}, data: "head body tail" },
    { name: "wire", wave: "0.1..0." },
]}
</script>


2019/05/15                                                         :COMPUTER:
---------
emacs package management
;; add melpa package repo
(require 'package)
(add-to-list 'package-archives
             '("MELPA STABLE" . "https://stable.melpa.org/packages/") t)
(package-initialize)
M-x list-packages
M-x package-install RET flycheck

;; use-package install and config package
(use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

use ~/.emacs.d/init.el instead of ~/.emacs to config your emacs
1. no clutter $HOME dir
2. commit init.el to github: git clone repo ~/.emacs.d


2019/05/15                                                         :COMPUTER:
---------
Jenkins Pipeline (./Jenkinsfile)
- define build stage inside Jenkinsfile
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building ...'
            }
        }
        stage('Testing') {
            steps {
                echo 'Testing ...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying ...'
            }
        }
    }
    post {
        alwasy { ... }
        success { ... }
        failure { ... }
        unstable { ... }
        changed { ... }
    }
}
https://jenkins.io/doc/pipeline
https://github.com/jenkinsci/pipeline-examples/tree/master/pipeline-examples

2019/05/16                                                         :COMPUTER:
---------
Makefile/shell tips
- use 'filter', 'strip', 'subst', 'suffix' to manipulate string (i.e. filename,
  flag) in make file.
- use 'rc=$?; if [[ $? == 0 ]] ' to check success/failure of the last command
- use 'cmd 2>/dev/null 1>&2' to omit printing error output

2019/05/16                                                         :COMPUTER:
---------
ctag: add .cl to langmap
    ctag --langmap=c:+.cl -R .
vim add tag file
    :set tags=./tags;


2019/05/28                                                         :COMPUTER:
---------
connan - a c++ package manager (equivalent to nuget for csharp, npm for node,
maven for java).
Install conan
    $ pip install conan
    $ conan --version
    $ conan profile new default --detect
    $ conan search boost/1.70.0@conan/stable --remote conan-center   # search package
C++ project build file
    - CMakeList.txt  build
    - conanfile.txt  dependencies (consume package)
    - commands to build
        $ make -p build && cd build
        $ conan install ../
        $ cmake ../
        $ cmake --build .
create your own libary
    - conanfile.py
        - pulling source files
        - automate build
        - run tests
        - package your library
    $ make -p build && cd build
    $ conan install ../
    $ conan build ../       // conan use conanfile.py to call cmake to build
    $ conan create ../ <YOUR_LOCAL_REPO_DIR>  // create package locally
    $ conan upload <YOUR_LOCAL_REPO_DIR>   // upload package

2019/05/28
-------------
shell tips for waiting for the command to finish
1. output 'done' at the end of the work.sh
2. in foreground, run wait.sh
```
#!/bin/bash

show_progress()
{
  echo -n "Please wait until everything gets set up for you..."
  local -r pid="${1}"
  local -r delay='0.75'
  local spinstr='\|/-'   # print spinning for wait
  local temp
  echo -n "Configuring"
  while true; do
    sudo grep -i "done" /katacoda-background-finished &> /dev/null
    if [[ "$?" -ne 0 ]]; then
      temp="${spinstr#?}"  # delete the shorted match of ? from front of the string
      printf " [%c]  " "${spinstr}"
      spinstr=${temp}${spinstr%"${temp}"} # delete the shorted match of ? from back of the string
      sleep "${delay}"
      printf "\b\b\b\b\b\b"
    else
      break
    fi
  done
  printf "    \b\b\b\b"
  echo ""
  echo "Done. Have fun!"
}

show_progress
```

2019/05/28
-------------
mainipulating string in bash
- string length
    ${#string}
- length of matching substring at the beginning of string
    expr "$string" : '$substring'
- substring extraction
    ${string:position}
    ${string:position:length}
- substring removal
    ${string#substring}  // from front (shortest)
    ${string##substring}  // from front (longest)
    ${string%substring}  // from back (shortest)
    ${string%%substring}  // from back (longest)
- substring replacement
    ${string/substring/replacement}  // replace only the first
    ${string//substring/replacement} // replace all
    ${string/#substring/replacement}  // replace on the front
    ${string/%substring/replacement}  // replace on the end
- use awk
    awk '{print substr(...)}'

2019/05/29
-------------
C# language features
1. yeild
2. lazy<T>
3. string internalizing: share the same string, string-intern-pool, compile time
   and runtime
4. weakRef: large memory object which can be created easily
5. ?? operator, can be chained
6. where constraints
7. immutable class


2019/05/30
-------------
- gdb user defined command
    (gdb) define mycmd
    > info threads
    > c
    > end
    (gdb) mycomd
    (gdb) define dder
    > print $arg0 + $arg1 + $arg2
    > end
    (gdb) adder 1 2 3
    // support conditional/looping syntax
    if <expr> ...  else ...  end
    while <expr> ... end
    document commandname
    help user-defined
    show user
    show user commandname
- hooks. when you run `foo', hook-foo will run before `foo'.
    define hook-continue
    handle SIGARM pass
    end
    define hook-echo
    echo <<<---
    end
    define hookpost-echo
    echo --->>>
    end
- command files
    auto source file: .gdbinit/gdb.ini (windows)
    explicity sourcing: source <command_file>
- conditional breakpoint
    (gdb) break context_switch if next == init_task
- command on breakpoint
    (gdb) b do_mmap_pgoff
    (gdb) command 1
    > print addr
    > print len
    > print prot
    > cont
    > end
- pass commmand line args
    $ gdb --args a.out --opt=xyz
- run gdb passing preset commands (-ex)
    $ gdb ./a.out -ex 'b file.c:80' -ex 'b foofunc' -ex 'r -p arg1 -q arg2'
- finding source files
    $ apt-get source coreutils
    $ sudo apt-get install coreutil-dbgsysm
    $ gdb /bin/ls
    (gdb) list main
    (gdb) directory ~/src/coreutils-7.4/src/
    sometimes, however, debug symbols end up with absolute paths, such as the
    kernels. In that case, use 'set substitute-path' to tell gdb how to
    translate paths
    (gdb) list schedule
        /build/build/linux-2.6.32/kernel/sched.c: No such file or directory
    (gdb) set substitute-path /build/build/linux-2.6.32 /home/hyi/src/linux-2.6.32
    (gdb) list schedule
- debugging macros
    make KCFLAGS=-ggdb3 // tcc genereate debug symbol for gdb
    (gdb) macro exapnd ...
- gdb variables
    (gdb) set $foo=4
    (gdb) p $foo
- register variables
    $pc, $rsi
- x command
    x/FMT address
- hack use bash here document to pass input to gdb
    cat << EOF | sudo gdb
    > attach $$
    > call unbind_variable("PI")
    > detach
    > EOF
